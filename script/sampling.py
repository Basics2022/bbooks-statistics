# -*- coding: utf-8 -*-
"""sampling.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VSUuMNfGCLiQli8s-YLholtCSk0t0I4w
"""

"""


2025-06-11
"""

import numpy as np
import matplotlib.pyplot as plt

#> Parameters ------------------------------------------------------------------
n_samples_v = [ 4, 8, 16, 32 ]              # n.samples per each test
ns = len(n_samples_v)
n_tests =  500                              # n.tests
rng_label = 'Normal'
rng_param = {'mu':  0, 'sigma': 1 }
# rng_param = {'mu': -1, 'sigma': 1 }  # for Uniform

#> Plot
plot_single_hist = False
plot_single_fdm  = False
plot_single_kde  = False
plot_multid_cov  = True


#> Random number generator dict
rng_dict = {
    'Bernoulli': { 'generator': np.random.default_rng().choice, 'params': {}, \
                   'write_params': lambda mu, sigma, nt: {'a':[mu-sigma, mu+sigma], 'p':[.5, .5], 'size': nt}  },
    'Normal':    { 'generator': np.random.default_rng().normal, 'params': {}, \
                   'write_params': lambda mu, sigma, nt: {'loc': mu, 'scale': sigma, 'size': nt}  },
    'Uniform':   { 'generator': np.random.default_rng().uniform, 'params': {}, \
                   'write_params': lambda mu, sigma, nt: {'low': mu, 'high': sigma, 'size': nt}  }
}

rng = rng_dict[rng_label]   # select random number generator

#> Sample average and variance of a random variable
res_dict = {}

for n_samples in n_samples_v:

    rng_param['nt'] = n_samples

    res_dict[n_samples] = { 'avg': [], 'var': [], 'cov': [], 'samples': [], 'var_x': [], 'var_y': [], 'cor': []}

    for i_test in range(n_tests):
        x = rng['generator']( **rng['write_params']( **rng_param ) )
        y = rng['generator']( **rng['write_params']( **rng_param ) )

        x_avg = np.average( x )
        x_var = np.var( x, ddof=1 )            # / (n_samples-1), unbiased var
        y_var = np.var( y, ddof=1 )            # / (n_samples-1), unbiased var

        cov_xy = np.cov( x, y, ddof=1 )[0,1]   # / (n_samples-1), unbiased var

        res_dict[n_samples]['avg'].append( x_avg )
        res_dict[n_samples]['var'].append( x_var )
        res_dict[n_samples]['cov'].append( cov_xy )
        res_dict[n_samples]['var_x'].append( x_var )
        res_dict[n_samples]['var_y'].append( y_var )
        res_dict[n_samples]['cor'].append( cov_xy / ( x_var * y_var )**.5 )
        res_dict[n_samples]['samples'].append( {'x': x, 'y': y} )

"""# Plots

## Plots probability functions of sample average $\hat{\mu}$ and variance $\hat{\sigma}^2$

### With histograms
"""

if ( plot_single_hist ):
    #> Plots using histrograms
    fig, ax = plt.subplots(2, ns, figsize=(4*ns, 4*2))
    
    for i in range(ns):
    
        n_samples = n_samples_v[i]
    
        ax[0,i].hist( res_dict[n_samples]['avg'], bins=20, density=True )
        ax[0,i].set_title("$\hat{\mu}$ "+f"N.samples:{n_samples}")
        ax[1,i].hist( res_dict[n_samples]['var'], bins=20, density=True )
        ax[1,i].set_title("$\hat{\sigma}^2$ "+f"N.samples:{n_samples}")

"""### cdf and evaluate pdf by finite difference

Plot *cdf* and then evaluate *pdf* with finite difference
"""

if ( plot_single_fdm ):
    #> Plots using cdf and finite difference to evaluate pdf
    fig_cdf, ax_cdf = plt.subplots(2, ns, figsize=(4*ns, 4*2))
    # fig_pdf, ax_pdf = plt.subplots(2, ns, figsize=(4*ns, 4*2))
    
    
    for i_s in range(ns):
    
        n_samples = n_samples_v[i_s]
    
        x_avg_s = np.sort( res_dict[n_samples]['avg'] )
        x_var_s = np.sort( res_dict[n_samples]['var'] )
        ones_v  = np.arange( len(x_avg_s) ) / len(x_avg_s)
    
        # pdf_avg = [ (ones_v[1]-ones_v[0])/(x_avg_s[1]-x_avg_s[0]) ] + \
        #           [ (ones_v[i+1]-ones_v[i-1])/(x_avg_s[i+1]-x_avg_s[i-1]) for i in np.arange(1,n_tests-1) ] + \
        #           [ (ones_v[-1]-ones_v[-2])/(x_avg_s[-1]-x_avg_s[-2]) ]
    
        # pdf_var =
    
        ax_cdf[0,i_s].plot(x_avg_s, ones_v);  ax_cdf[0,i_s].grid();
        ax_cdf[1,i_s].plot(x_var_s, ones_v);  ax_cdf[1,i_s].grid();  ax_cdf[1,i_s].set_title("")
    
        ax_cdf[0,i_s].set_title("cdf $\hat{\mu}$ "     +f"N.samples:{n_samples}")
        ax_cdf[1,i_s].set_title("cdf $\hat{\sigma}^2$ "+f"N.samples:{n_samples}")
    
        # ax_pdf[1,i_s].plot(x_var_s, pdf_var);  ax_pdf[1,i_s].grid()
    
        # ax_pdf[0,i_s].plot(x_avg_s, pdf_avg)
        # ax_pdf[1,i].plot(x_var_s, pdf_var)

"""### cdf and pdf by kernel methods

Kernel Density Estimation (KDE) method fits data with

$$\hat{f}_h(x) = \frac{1}{n}\sum_{i=1}^n K_h(x-x_i) \ ,$$

with $K_h(x) = \frac{1}{h} K\left(\frac{x}{h}\right)$ and $K(x)$ the kernel function. Integral $\int_{-\infty}^{+\infty} K(x) \, dx = 1$ for building a unit-integral - and thus a valid - pdf function. As an example, $K(x)$ may be set equal to a Gaussian pdf

$$K(x) = \phi(x) = \frac{1}{\sqrt{2 \pi \sigma^2}} \exp \left( - \dfrac{x^2}{2 \sigma^2} \right)$$
"""

# import routine for Kerndel Density Estimation
from scipy.stats import gaussian_kde


if ( plot_single_kde ):
     #> Plots using histrograms
     fig_adim, ax_adim = plt.subplots(2,2, figsize=(4*2, 4*2))
     
     fig_cdf, ax_cdf = plt.subplots(2, ns, figsize=(4*ns, 4*2))
     fig_pdf, ax_pdf = plt.subplots(2, ns, figsize=(4*ns, 4*2))
     
     
     for i_s in range(ns):
     
         n_samples = n_samples_v[i_s]
     
         x_avg_s = np.sort( res_dict[n_samples]['avg'] )
         x_var_s = np.sort( res_dict[n_samples]['var'] )
     
         kernel_avg = gaussian_kde(x_avg_s)
         kernel_var = gaussian_kde(x_var_s)
     
         x_avg_plot = np.linspace(min(x_avg_s), max(x_avg_s), 30)
         x_var_plot = np.linspace(min(x_var_s), max(x_var_s), 30)
         pdf_avg = kernel_avg(x_avg_plot)
         pdf_var = kernel_var(x_var_plot)
         #           [ (ones_v[i+1]-ones_v[i-1])/(x_avg_s[i+1]-x_avg_s[i-1]) for i in np.arange(1,n_tests-1) ] + \
         #           [ (ones_v[-1]-ones_v[-2])/(x_avg_s[-1]-x_avg_s[-2]) ]
     
         # pdf_var =
     
         ax_cdf[0,i_s].plot(x_avg_s, ones_v);  ax_cdf[0,i_s].grid()
         ax_cdf[1,i_s].plot(x_var_s, ones_v);  ax_cdf[1,i_s].grid()
     
         ax_pdf[0,i_s].plot(x_avg_plot, pdf_avg);  ax_pdf[0,i_s].grid()
         ax_pdf[1,i_s].plot(x_var_plot, pdf_var);  ax_pdf[1,i_s].grid()
     
         ax_cdf[0,i_s].set_title("cdf $\hat{\mu}$ "     +f"N.samples:{n_samples}")
         ax_cdf[1,i_s].set_title("cdf $\hat{\sigma}^2$ "+f"N.samples:{n_samples}")
         ax_pdf[0,i_s].set_title("pdf $\hat{\mu}$ "     +f"N.samples:{n_samples}")
         ax_pdf[1,i_s].set_title("pdf $\hat{\sigma}^2$ "+f"N.samples:{n_samples}")
     
         ax_adim[0,0].plot(x_avg_s*np.sqrt(n_samples), ones_v)
         ax_adim[1,0].plot(x_var_s                   , ones_v)
         ax_adim[0,1].plot(x_avg_plot*np.sqrt(n_samples), pdf_avg/np.sqrt(n_samples))
         ax_adim[1,1].plot(x_var_plot                   , pdf_var                   )
     
     ax_adim[0,1].grid(); ax_adim[1,1].grid(); ax_adim[0,0].grid(); ax_adim[1,0].grid()

"""## Covariance $\text{Cov}(X,Y)$, and statistics of sample covariance $\hat{K}(X,Y)$

$$\hat{K} = \dfrac{1}{n-1} \sum_{i = 1}^{n} \left( x_i - \hat{\mu}_{x,n} \right) \left( y_i - \hat{\mu}_{y,n} \right) $$
"""

if ( plot_multid_cov ):
    #> Plots using histrograms
    # fig_adim, ax_adim = plt.subplots(2,2, figsize=(4*2, 4*2))
    
    fig_cov, ax_cov = plt.subplots(2, ns, figsize=(4*ns, 4*2))
    fig_cor, ax_cor = plt.subplots(2, ns, figsize=(4*ns, 4*2))
    
    
    for i_s in range(ns):
    
        n_samples = n_samples_v[i_s]
    
        cov_s = np.sort( res_dict[n_samples]['cov'] )
        cor_s = np.sort( res_dict[n_samples]['cor'] )
    
        kernel_cov = gaussian_kde(cov_s)
        kernel_cor = gaussian_kde(cor_s)
    
        cov_plot = np.linspace(min(cov_s), max(cov_s), 100)
        cor_plot = np.linspace(min(cor_s), max(cor_s), 100)
        
        pdf_cov = kernel_cov(cov_plot)
        pdf_cor = kernel_cor(cor_plot)
        
        ones_cov_v  = np.arange( len(cov_s) ) / len(cov_s)
        ones_cor_v  = np.arange( len(cor_s) ) / len(cor_s)
    
        # pdf_var =
    
        ax_cov[0,i_s].plot(cov_s, ones_cov_v);  ax_cov[0,i_s].grid()
        ax_cov[1,i_s].plot(cov_plot, pdf_cov);  ax_cov[1,i_s].grid()
    
        ax_cor[0,i_s].plot(cor_s, ones_cor_v);  ax_cor[0,i_s].grid()
        ax_cor[1,i_s].plot(cor_plot, pdf_cor);  ax_cor[1,i_s].grid()
    
        ax_cov[0,i_s].set_title("$\hat{Cov}$ "+f"(N={n_samples})")
        ax_cor[0,i_s].set_title("$\hat{Cor}$ "+f"(N={n_samples})")

        if i_s == 0:
            ax_cov[0,i_s].set_ylabel("cdf");  ax_cov[1,i_s].set_ylabel("pdf")
            ax_cor[0,i_s].set_ylabel("cdf");  ax_cor[1,i_s].set_ylabel("pdf")
    
        # ax_adim[0,0].plot(x_avg_s*np.sqrt(n_samples), ones_v)
        # ax_adim[1,0].plot(x_var_s                   , ones_v)
        # ax_adim[0,1].plot(x_avg_plot*np.sqrt(n_samples), pdf_avg/np.sqrt(n_samples))
        # ax_adim[1,1].plot(x_var_plot                   , pdf_var                   )


    #> Show some samples: first (lowest cor), half (approx zero?), last (largest cor)
    # do it with n_samples = n_samples_v[-1] only?
    n_samples = n_samples_v[-3]
    isort = np.argsort( res_dict[n_samples]['cor'] )
    ilow, imid, ihig = isort[0], isort[int(n_tests/2)], isort[-1]
    print(res_dict[n_samples]['cor'][ilow])
    print(res_dict[n_samples]['cor'][imid])
    print(res_dict[n_samples]['cor'][ihig])

    print(ilow, imid, ihig)

    xlow = res_dict[n_samples]['samples'][ilow]['x']
    xmid = res_dict[n_samples]['samples'][imid]['x']
    xhig = res_dict[n_samples]['samples'][ihig]['x']

    ylow = res_dict[n_samples]['samples'][ilow]['y']
    ymid = res_dict[n_samples]['samples'][imid]['y']
    yhig = res_dict[n_samples]['samples'][ihig]['y']

    fig, ax = plt.subplots(1,3, figsize=(12,4))
    ax[0].plot(xlow, ylow, 'o');  ax[0].grid()
    ax[1].plot(xmid, ymid, 'o');  ax[1].grid()
    ax[2].plot(xhig, yhig, 'o');  ax[2].grid()

    # for i in range(3):
    #     ax[i].set_xlabel('x');  ax[i].set_xlim(-1.5, 1.5) 
    #     ax[i].set_ylabel('y');  ax[i].set_ylim(-1.5, 1.5)

    fig, ax = plt.subplots(1,3, figsize=(12,4))
    ax[0].plot(xlow, '-o');  ax[0].plot(ylow, '-o');  ax[0].grid()
    ax[1].plot(xmid, '-o');  ax[1].plot(ymid, '-o');  ax[1].grid()
    ax[2].plot(xhig, '-o');  ax[2].plot(yhig, '-o');  ax[2].grid()


plt.show()



